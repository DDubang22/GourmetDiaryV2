{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: \"LoginPage\",\n  data() {\n    return {\n      formData: {\n        loginId: '',\n        password: '',\n        passwordCheck: '',\n        name: ''\n      },\n      errorMessages: {\n        loginId: '',\n        password: '',\n        passwordCheck: '',\n        name: ''\n      }\n    };\n  },\n  mounted() {},\n  methods: {\n    submitForm() {\n      this.errorMessages = {\n        loginId: '',\n        password: '',\n        passwordCheck: '',\n        name: ''\n      };\n      if (this.isAnyInputEmpty()) {\n        alert('모든 항목을 입력하세요.');\n        return;\n      }\n      this.sendDataToServer(this.formData);\n    },\n    async sendDataToServer(data) {\n      try {\n        const response = await axios.post('http://localhost:8080/login/generallogin', data);\n        console.log(\"response from server\", response.data);\n        this.$router.push('/map');\n      } catch (error) {\n        console.error('Error seding data to server', error);\n        if (error.response) {\n          // 서버 응답이 400대인 경우\n          if (error.response.status >= 400 && error.response.status < 500) {\n            // 여기에 클라이언트에게 알리고자 하는 작업을 추가\n            alert('서버에서 400대의 오류가 발생했습니다. ' + error.response.data);\n          } else {\n            // 다른 상태 코드의 경우 에러 메시지만 설정\n            this.errorMessages = error.response.data;\n          }\n        }\n        if (error.response) {\n          this.errorMessages = error.response.data;\n        }\n      }\n    },\n    isInputEmpty(value) {\n      return !value || value.trim() === '';\n    },\n    isAnyInputEmpty() {\n      // 입력 값이 하나라도 비어있으면 true 반환\n      return Object.values(this.formData).some(value => this.isInputEmpty(value));\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","formData","loginId","password","passwordCheck","errorMessages","mounted","methods","submitForm","isAnyInputEmpty","alert","sendDataToServer","response","post","console","log","$router","push","error","status","isInputEmpty","value","trim","Object","values","some"],"sources":["/Users/jangsubhin/캡스톤디자인/gourmetdiary/vue/gourmetdiary/src/components/BasicLogin.vue"],"sourcesContent":["<template>\n    <div class=\"main\">\n         <div class=\"login_page\">\n             <div class=\"login_pageItem\">\n               <h1>회원 가입</h1>\n               <form class=\"row g-3\" @submit.prevent=\"submitForm\">\n                 <div class=\"mb-3\">\n                     <div class=\"login_pageItem_object\">\n                        <label for=\"id\" class=\"form-label\">이메일</label>\n                        <input type=\"email\" class=\"form-control\" id=\"id\" placeholder=\"이메일을 입력해주세요\" v-model=\"formData.loginId\">\n                        <button type=\"button\" class=\"btn btn-outline-warning btnlocate\">이메일 검사</button>                     \n                    </div>\n                    <!-- 입력 값이 없을 때 메시지 -->\n                    <div v-if=\"isInputEmpty(formData.loginId)\" class=\"text-danger\">이메일을 입력하세요.</div>\n\n                    <div v-if=\"errorMessages.loginId\" class=\"text-danger\">{{ errorMessages.loginId }}</div>\n                 </div>\n                 \n                 <div class=\"mb-3\">\n                    <div class=\"login_pageItem_object\">\n                        <label for=\"password\" class=\"form-label\">비밀번호</label>\n                        <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"비밀번호를 입력해주세요\" v-model=\"formData.password\">\n                    </div>\n                    <!-- 입력 값이 없을 때 메시지 -->\n                    <div v-if=\"isInputEmpty(formData.password)\" class=\"text-danger\">비밀번호를 입력하세요.</div>\n\n                    <div v-if=\"errorMessages.password\" class=\"text-danger\">{{ errorMessages.password }}</div>\n                 </div>\n                 <div class=\"mb-3\">\n                    <div class=\"login_pageItem_object\">\n                        <label for=\"password_check\" class=\"form-label\">비밀번호 확인</label>\n                        <input type=\"password\" class=\"form-control\" id=\"password_check\" placeholder=\"비밀번호를 다시 입력해주세요\" v-model=\"formData.passwordCheck\">   \n                    </div>\n                    <!-- 입력 값이 없을 때 메시지 -->\n                    <div v-if=\"isInputEmpty(formData.passwordCheck)\" class=\"text-danger\">비밀번호를 다시 입력하세요.</div>\n\n                    <div v-if=\"errorMessages.passwordCheck\" class=\"text-danger\">{{ errorMessages.passwordCheck }}</div>\n                 </div>\n                 <div class=\"mb-3\">\n                     <div class=\"login_pageItem_object\">\n                        <label for=\"nickname\" class=\"form-label\">닉네임</label>\n                        <input type=\"text\" class=\"form-control\" id=\"nickname\"  placeholder=\"닉네임을 입력해주세요\" v-model=\"formData.name\">\n                        <button type=\"button\" class=\"btn btn-outline-warning btnlocate\">닉네임 중복</button>\n                    </div>\n                    <!-- 입력 값이 없을 때 메시지 -->\n                    <div v-if=\"isInputEmpty(formData.name)\" class=\"text-danger\">닉네임을 입력하세요.</div>\n\n                    <div v-if=\"errorMessages.name\" class=\"text-danger\">{{ errorMessages.name }}</div>\n                 </div>\n                 <div class=\"d-grid gap-2\">\n                        <button class=\"btn btn-primary\" type=\"submit\">가입은 여기로 눌러주세요!!!</button>\n                 </div>\n               </form>\n             </div>\n         </div>\n     </div>\n </template>\n <script>\n import axios from 'axios';\n \n export default {\n     name: \"LoginPage\",\n     data () {\n         return {\n             formData : {\n                loginId : '',\n                password : '',\n                passwordCheck : '',\n                name : '',\n             },\n             errorMessages: {\n                loginId: '',\n                password: '',\n                passwordCheck: '',\n                name: '',\n            },\n         };\n     },\n     mounted() {\n        \n     },\n     methods: {\n        submitForm() {\n\n        this.errorMessages = {\n            loginId: '',\n            password: '',\n            passwordCheck: '',\n            name: '',\n        };\n\n        if (this.isAnyInputEmpty()) {\n            alert('모든 항목을 입력하세요.');\n            return;\n        }\n\n        this.sendDataToServer(this.formData);\n    },\n    async sendDataToServer(data) {\n        try {\n            const response = await axios.post('http://localhost:8080/login/generallogin',data);\n            console.log(\"response from server\", response.data);\n            this.$router.push('/map');\n        } catch (error) {\n            console.error('Error seding data to server', error);\n\n            if (error.response) {\n            // 서버 응답이 400대인 경우\n                if (error.response.status >= 400 && error.response.status < 500) {\n                    // 여기에 클라이언트에게 알리고자 하는 작업을 추가\n                    alert('서버에서 400대의 오류가 발생했습니다. ' + error.response.data);\n                } else {\n                    // 다른 상태 코드의 경우 에러 메시지만 설정\n                    this.errorMessages = error.response.data;\n                }\n        }\n            \n            if(error.response){\n                this.errorMessages = error.response.data;\n            }\n            \n        }\n     },\n     isInputEmpty(value) {\n        return !value || value.trim() === '';\n     },\n     isAnyInputEmpty() {\n        // 입력 값이 하나라도 비어있으면 true 반환\n        return Object.values(this.formData).some(value => this.isInputEmpty(value));\n    }\n\n     },\n }\n </script>\n \n <style>\n .main {\n     position: absolute;\n     bottom: 0;\n     right : 0;\n     display: flex;\n \n }\n .login_page {\n     width:85vw;\n     height: 100vh;\n     display: flex;\n     justify-content: center;\n     align-items: center;\n }\n \n .login_pageItem {\n     width: 650px;\n     display: flex;\n     flex-direction: column;\n }\n \n .login_pageItem h1{\n     margin-bottom: 1.5em;\n }\n\n .login_pageItem_object {\n    display: flex;\n    width: 39em;\n    justify-content: center;\n    position: relative;\n }\n \n .login_pageItem_object button {\n    width: 9em;\n }\n\n\n .form-control {\n    margin-right : 15px;\n }\n \n .form-label{\n    text-align:left;\n    margin-right: 10px;\n }\n\n.btnlocate {\n    position:absolute;\n    right: 15px;\n}\n </style>"],"mappings":";AA0DC,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACXC,IAAI,EAAE,WAAW;EACjBC,IAAGA,CAAA,EAAK;IACJ,OAAO;MACHC,QAAO,EAAI;QACRC,OAAM,EAAI,EAAE;QACZC,QAAO,EAAI,EAAE;QACbC,aAAY,EAAI,EAAE;QAClBL,IAAG,EAAI;MACV,CAAC;MACDM,aAAa,EAAE;QACZH,OAAO,EAAE,EAAE;QACXC,QAAQ,EAAE,EAAE;QACZC,aAAa,EAAE,EAAE;QACjBL,IAAI,EAAE;MACV;IACH,CAAC;EACL,CAAC;EACDO,OAAOA,CAAA,EAAG,CAEV,CAAC;EACDC,OAAO,EAAE;IACNC,UAAUA,CAAA,EAAG;MAEb,IAAI,CAACH,aAAY,GAAI;QACjBH,OAAO,EAAE,EAAE;QACXC,QAAQ,EAAE,EAAE;QACZC,aAAa,EAAE,EAAE;QACjBL,IAAI,EAAE;MACV,CAAC;MAED,IAAI,IAAI,CAACU,eAAe,CAAC,CAAC,EAAE;QACxBC,KAAK,CAAC,eAAe,CAAC;QACtB;MACJ;MAEA,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAACV,QAAQ,CAAC;IACxC,CAAC;IACD,MAAMU,gBAAgBA,CAACX,IAAI,EAAE;MACzB,IAAI;QACA,MAAMY,QAAO,GAAI,MAAMd,KAAK,CAACe,IAAI,CAAC,0CAA0C,EAACb,IAAI,CAAC;QAClFc,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,QAAQ,CAACZ,IAAI,CAAC;QAClD,IAAI,CAACgB,OAAO,CAACC,IAAI,CAAC,MAAM,CAAC;MAC7B,EAAE,OAAOC,KAAK,EAAE;QACZJ,OAAO,CAACI,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QAEnD,IAAIA,KAAK,CAACN,QAAQ,EAAE;UACpB;UACI,IAAIM,KAAK,CAACN,QAAQ,CAACO,MAAK,IAAK,GAAE,IAAKD,KAAK,CAACN,QAAQ,CAACO,MAAK,GAAI,GAAG,EAAE;YAC7D;YACAT,KAAK,CAAC,yBAAwB,GAAIQ,KAAK,CAACN,QAAQ,CAACZ,IAAI,CAAC;UAC1D,OAAO;YACH;YACA,IAAI,CAACK,aAAY,GAAIa,KAAK,CAACN,QAAQ,CAACZ,IAAI;UAC5C;QACR;QAEI,IAAGkB,KAAK,CAACN,QAAQ,EAAC;UACd,IAAI,CAACP,aAAY,GAAIa,KAAK,CAACN,QAAQ,CAACZ,IAAI;QAC5C;MAEJ;IACH,CAAC;IACDoB,YAAYA,CAACC,KAAK,EAAE;MACjB,OAAO,CAACA,KAAI,IAAKA,KAAK,CAACC,IAAI,CAAC,MAAM,EAAE;IACvC,CAAC;IACDb,eAAeA,CAAA,EAAG;MACf;MACA,OAAOc,MAAM,CAACC,MAAM,CAAC,IAAI,CAACvB,QAAQ,CAAC,CAACwB,IAAI,CAACJ,KAAI,IAAK,IAAI,CAACD,YAAY,CAACC,KAAK,CAAC,CAAC;IAC/E;EAEC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}